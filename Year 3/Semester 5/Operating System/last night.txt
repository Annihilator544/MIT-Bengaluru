question 1

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

// Function to generate Fibonacci sequence
void *generateFibonacci(void *arg) {
    int *fibSeq = (int *)arg;
    int n = fibSeq[0];
    
    fibSeq[1] = 0;
    fibSeq[2] = 1;

    for (int i = 3; i <= n; ++i) {
        fibSeq[i] = fibSeq[i - 1] + fibSeq[i - 2];
    }

    pthread_exit(NULL);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <number_of_fibonacci_numbers>\n", argv[0]);
        return 1;
    }

    int n = atoi(argv[1]);
    if (n <= 0) {
        printf("Please enter a valid positive number.\n");
        return 1;
    }

    int fibSeq[n + 1];
    fibSeq[0] = n;

    pthread_t tid;
    pthread_create(&tid, NULL, generateFibonacci, (void *)fibSeq);
    pthread_join(tid, NULL);

    printf("Fibonacci Sequence:\n");
    for (int i = 1; i <= n; ++i) {
        printf("%d ", fibSeq[i]);
    }
    printf("\n");

    return 0;
}

question 2

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

// Structure to pass data between threads
struct ThreadData {
    int start;
    int end;
    int result;
};

// Function to calculate summation in a separate thread
void *calculateSum(void *arg) {
    struct ThreadData *data = (struct ThreadData *)arg;

    int sum = 0;
    for (int i = data->start; i <= data->end; ++i) {
        sum += i;
    }

    data->result = sum;

    pthread_exit(NULL);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <non_negative_integer>\n", argv[0]);
        return 1;
    }

    int n = atoi(argv[1]);
    if (n < 0) {
        printf("Please enter a non-negative integer.\n");
        return 1;
    }

    pthread_t tid;
    struct ThreadData data;
    data.start = 0;
    data.end = n;

    // Create a separate thread to calculate the summation
    pthread_create(&tid, NULL, calculateSum, (void *)&data);
    pthread_join(tid, NULL);

    // Print the result in the main thread
    printf("Sum of non-negative integers from 0 to %d: %d\n", n, data.result);

    return 0;
}

question 3

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

// Structure to pass data between threads
struct ThreadData {
    int start;
    int end;
};

// Function to check if a number is prime
int isPrime(int num) {
    if (num <= 1) {
        return 0;  // Not prime
    }

    for (int i = 2; i * i <= num; ++i) {
        if (num % i == 0) {
            return 0;  // Not prime
        }
    }

    return 1;  // Prime
}

// Function to generate prime numbers in a given range in a separate thread
void *generatePrimes(void *arg) {
    struct ThreadData *data = (struct ThreadData *)arg;

    printf("Prime numbers from %d to %d: ", data->start, data->end);

    for (int i = data->start; i <= data->end; ++i) {
        if (isPrime(i)) {
            printf("%d ", i);
        }
    }

    printf("\n");

    pthread_exit(NULL);
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        printf("Usage: %s <start_number> <end_number>\n", argv[0]);
        return 1;
    }

    int start = atoi(argv[1]);
    int end = atoi(argv[2]);

    if (start < 2 || end < 2 || start > end) {
        printf("Please enter valid range (start and end should be positive integers with start <= end).\n");
        return 1;
    }

    pthread_t tid;
    struct ThreadData data;
    data.start = start;
    data.end = end;

    // Create a separate thread to generate prime numbers
    pthread_create(&tid, NULL, generatePrimes, (void *)&data);
    pthread_join(tid, NULL);

    return 0;
}

question 4

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

// Structure to pass data between threads
struct ThreadData {
    int *arr;
    int size;
    int sumEven;
    int sumOdd;
};

// Function to perform the sum of even and odd numbers in a separate thread
void *calculateSums(void *arg) {
    struct ThreadData *data = (struct ThreadData *)arg;

    for (int i = 0; i < data->size; ++i) {
        if (data->arr[i] % 2 == 0) {
            data->sumEven += data->arr[i];
        } else {
            data->sumOdd += data->arr[i];
        }
    }

    pthread_exit(NULL);
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <number1> <number2> ... <numberN>\n", argv[0]);
        return 1;
    }

    int size = argc - 1;
    int *arr = (int *)malloc(size * sizeof(int));

    for (int i = 0; i < size; ++i) {
        arr[i] = atoi(argv[i + 1]);
    }

    pthread_t tid;
    struct ThreadData data;
    data.arr = arr;
    data.size = size;
    data.sumEven = 0;
    data.sumOdd = 0;

    // Create a separate thread to perform the sum of even and odd numbers
    pthread_create(&tid, NULL, calculateSums, (void *)&data);
    pthread_join(tid, NULL);

    // Print the results in the main thread
    printf("Sum of even numbers: %d\n", data.sumEven);
    printf("Sum of odd numbers: %d\n", data.sumOdd);

    free(arr);
    return 0;
}

